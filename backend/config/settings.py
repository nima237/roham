"""
Django settings for tse_resolutions project.

Generated by 'django-admin startproject' using Django 4.2.10.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv
from datetime import timedelta

# Load environment variables
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('DJANGO_SECRET_KEY', 'django-insecure-+x##blslfsnoxm2l$5kqb!nqc!b#tk+865$h*e@#d!*qj&lw%g')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'False').lower() == 'true'

ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS', 'localhost,127.0.0.1,backend').split(',')

# Security settings for HTTPS
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
SECURE_SSL_REDIRECT = False  # Set to True in production
SESSION_COOKIE_SECURE = os.getenv('SESSION_COOKIE_SECURE', 'False').lower() == 'true'

# CSRF settings for both development and production
CSRF_COOKIE_SECURE = os.getenv('CSRF_COOKIE_SECURE', 'False').lower() == 'true'
CSRF_COOKIE_HTTPONLY = True
CSRF_COOKIE_SAMESITE = 'Lax'
CSRF_USE_SESSIONS = False

# Get the current domain from environment or use defaults
CURRENT_DOMAIN = os.getenv('CURRENT_DOMAIN', 'localhost')
CSRF_TRUSTED_ORIGINS = os.getenv('CSRF_TRUSTED_ORIGINS', f'http://{CURRENT_DOMAIN},https://{CURRENT_DOMAIN},http://127.0.0.1,https://127.0.0.1,http://backend,https://backend,https://localhost').split(',')


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "apps.core",
    "django_filters",
    "corsheaders",
    "channels",
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "apps.core.middleware.JWTAuthCookieMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "apps.core.middleware.CSRFExemptionMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"
ASGI_APPLICATION = "config.asgi.application"

# Channels configuration
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            "hosts": [('redis', 6379)],
        },
    },
}

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'mssql',
        'NAME': os.getenv('SQLSERVER_DB', 'RH_TSE_DB'),
        'USER': os.getenv('SQLSERVER_USER', 'sa'),
        'PASSWORD': os.getenv('SQLSERVER_PASSWORD', 'tse_pass_123'),
        'HOST': os.getenv('SQLSERVER_HOST', 'db'),
        'PORT': os.getenv('SQLSERVER_PORT', '1433'),
        'OPTIONS': {
            'connection_string': (
                'Driver=ODBC Driver 17 for SQL Server;'
                'Server=db,1433;'
                'Database=RH_TSE_DB;'
                'Uid=sa;Pwd=tse_pass_123;'
                'Encrypt=yes;TrustServerCertificate=yes;'
            ),
        },
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = BASE_DIR / "staticfiles"

# Media files (User uploads)
MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"

# File upload limits
FILE_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024  # 10 MB
DATA_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024   # 10 MB

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Use UUID as default PK for new models
# (Explicitly set in models, but can be enforced globally if desired)
# DEFAULT_AUTO_FIELD = "django.db.models.UUIDField"

# Placeholder for custom user model
# AUTH_USER_MODEL = "core.User"

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticatedOrReadOnly',
    ],
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.SearchFilter',
        'rest_framework.filters.OrderingFilter',
    ],
}

# JWT Cookie settings
JWT_COOKIE_NAME = 'jwt_access'
JWT_REFRESH_COOKIE_NAME = 'jwt_refresh'
JWT_COOKIE_PATH = '/'
JWT_COOKIE_SECURE = os.getenv('JWT_COOKIE_SECURE', 'False').lower() == 'true'  # Set to True when using HTTPS
JWT_COOKIE_HTTPONLY = True
JWT_COOKIE_SAMESITE = 'Lax'
JWT_COOKIE_MAX_AGE = int(os.getenv('JWT_COOKIE_MAX_AGE', 60 * 60 * 24 * 7))  # 7 days default

# JWT Token settings
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(hours=24 * 7),  # 7 days
    'REFRESH_TOKEN_LIFETIME': timedelta(days=30),      # 30 days
    'ROTATE_REFRESH_TOKENS': True,                     # Auto refresh
    'BLACKLIST_AFTER_ROTATION': True,                  # Security
    'UPDATE_LAST_LOGIN': True,                         # Track login time
    
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,
    'JWK_URL': None,
    'LEEWAY': 0,
    
    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule',
    
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
    'TOKEN_USER_CLASS': 'rest_framework_simplejwt.models.TokenUser',
    
    'JTI_CLAIM': 'jti',
    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(hours=24 * 7),  # 7 days
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=30),  # 30 days
}

# CORS settings
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOWED_ORIGINS = os.getenv('CORS_ALLOWED_ORIGINS', 'http://localhost:3000,http://127.0.0.1:3000,http://62.60.198.100,https://localhost:3000,https://127.0.0.1:3000,https://62.60.198.100').split(',')

# Development-specific settings
if DEBUG:
    # Disable secure cookies in development
    CSRF_COOKIE_SECURE = False
    CSRF_COOKIE_HTTPONLY = False
    SESSION_COOKIE_SECURE = False
    
    # Add comprehensive HTTPS origins for development
    additional_origins = [
        'https://localhost',
        'https://127.0.0.1',
        'https://62.60.198.100',
        'https://backend',
        'https://localhost:443',
        'https://127.0.0.1:443',
        'https://62.60.198.100:443',
        'https://backend:443',
        'http://localhost:80',
        'http://127.0.0.1:80',
        'http://backend:80'
    ]
    CSRF_TRUSTED_ORIGINS.extend(additional_origins)
    CORS_ALLOWED_ORIGINS.extend(additional_origins)
else:
    # Production settings
    CSRF_COOKIE_SECURE = True
    SESSION_COOKIE_SECURE = True

# Global CSRF exemption for admin (both development and production)
CSRF_EXEMPT_URLS = ['/admin/', '/admin/login/', '/admin/logout/']

# Always exempt admin from CSRF regardless of DEBUG mode
CSRF_EXEMPT_ADMIN = True

# LDAP Configuration
LDAP_SERVER_URI = os.getenv('LDAP_SERVER_URI', 'ldap://ldap:389')
LDAP_BIND_DN = os.getenv('LDAP_BIND_DN', 'cn=admin,dc=rh-tse,dc=local')
LDAP_BIND_PASSWORD = os.getenv('LDAP_BIND_PASSWORD', 'admin123')
LDAP_USER_BASE = 'ou=people,dc=rh-tse,dc=local'
LDAP_GROUP_BASE = 'ou=groups,dc=rh-tse,dc=local'

# Custom authentication backend for LDAP and case-insensitive username
AUTHENTICATION_BACKENDS = [
    'apps.core.auth.LDAPBackend',
    'apps.core.auth.CaseInsensitiveModelBackend',
]
