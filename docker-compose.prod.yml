version: '3.8'

services:
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    env_file:
      - .env.production
    volumes:
      - ./backend/media:/app/media
      - ./backend/staticfiles:/app/staticfiles
    expose:
      - "8000"
    environment:
      - DEBUG=False
      - DJANGO_SETTINGS_MODULE=config.settings
      - POSTGRES_HOST=db
      - POSTGRES_DB=${POSTGRES_DB:-tse_db}
      - POSTGRES_USER=${POSTGRES_USER:-tse_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-tse_pass_123}
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-62.60.198.100,localhost,backend}
      - CORS_ALLOW_ALL_ORIGINS=False
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS:-http://62.60.198.100}
      - CSRF_TRUSTED_ORIGINS=${CSRF_TRUSTED_ORIGINS:-http://62.60.198.100}
      - IN_DOCKER=1
      - POSTGRES_PORT=5433
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./backend/staticfiles:/app/staticfiles:ro
      - ./backend/media:/app/media:ro
    depends_on:
      - backend
      - frontend
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    env_file:
      - .env.production
    volumes:
      - ./frontend/public:/app/public
    expose:
      - "3000"
    environment:
      - NODE_ENV=production
    depends_on:
      - backend
    restart: unless-stopped

  db:
    image: postgres:13
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-tse_db}
      - POSTGRES_USER=${POSTGRES_USER:-tse_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-tse_pass_123}
      - POSTGRES_PORT=5433
    expose:
      - "5433"
    command: -p 5433
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-tse_user} -d ${POSTGRES_DB:-tse_db} -p 5433"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    expose:
      - "6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

volumes:
  postgres_data: 